---
import { getSchemaRecursive } from "./method";

interface Props {
	path: string;
	parameters: Array<object>;
}

const { path, parameters } = Astro.props;

const params = parameters?.filter((param) => param.in === "query");

const getDefault = (name) => {
	switch (name) {
		case "direction":
			// This is a hack to get the default value for the direction parameter
			if (path === "/v0/projects/{project}/alerts") {
				return "desc";
			}
			return "asc";
		case "page":
			return 1;
		case "per_page":
			return 8;
		default:
			return;
	}
};

const getTypes = (parameter) => {
	const name = parameter?.name;
	const schema = parameter?.schema;

	if (schema?.type) {
		return [schema.type, getDefault(name), null];
	}
	const refSchema = getSchemaRecursive(schema);

	if (refSchema?.type === "string") {
		if (refSchema?.enum) {
			return ["string", getDefault(name), refSchema.enum];
		}
		return ["string", getDefault(name), null];
	}

	if (refSchema?.type === "integer") {
		return ["integer", getDefault(name), null];
	}

	if (Array.isArray(refSchema?.oneOf)) {
		const oneOf = refSchema.oneOf.flatMap((schema) => schema?.enum);
		// This will break when there are multiple oneOfs
		const defaultParam = oneOf?.length === 1 ? oneOf[0] : null;
		return ["string", defaultParam, oneOf];
	}

	return [null, null, null];
};
---

{params?.length > 0 && (
  <h3 class="title is-5" style="margin-top: 4rem;">Query Parameters</h3>
  <>
  {params.map((parameter) => {
    const [types, defaultParam, oneOf] = getTypes(parameter);
    return (
    <hr />
    <p>
      <div class="level">
        <div class="level-left">
            <div class="level-item">
              <code>{parameter.name}</code>
            </div>
            {types?.length > 0 &&
            <div class="level-item">
                <p>{types}</p>
            </div>
            }
			{parameter?.required === true &&
            <div class="level-item">
              <b>Required</b>
            </div>}
        </div>
      </div>
    </p>
    <p>{parameter.description}</p>
    <>
    {defaultParam && <p>Default: <code>{defaultParam}</code></p>}
    </>
    <>
    {oneOf && <p>One of: {oneOf.map((variant, index) => { return <>{index !== 0 && ", "}<code>{variant}</code></>})}</p>}
    </>
  )})}
  </>
)}
