---
import openapi from "../../../../public/download/openapi.json";
import { type MethodKind, getSchema, parseSchemaRef } from "./method";
import BodyParametersInner from "./BodyParametersInner.astro";
import type { Language } from "../../../i18n/ui";

interface Props {
	lang: Language;
	path: string;
	method: MethodKind;
	requestBody: object;
}

const { lang, path, method, requestBody } = Astro.props;

const schema = getSchema(requestBody?.content?.["application/json"]?.schema);

const getProperties = () => {
	if (schema?.properties) {
		return schema?.properties;
	}
	const nullable = nullablePatch(schema?.anyOf);
	if (nullable) {
		return nullable;
	}
};

const nullablePatch = (anyOf) => {
	if (anyOf?.length !== 2) {
		return;
	}
	const base = parseSchemaRef(anyOf?.[0]);
	const nullable = parseSchemaRef(anyOf?.[1]);
	// This relies on the convention that the nullable type is the base type with "Null" appended
	if (`${base}Null` !== nullable) {
		return;
	}
	return openapi?.components?.schemas?.[base]?.properties;
};
---

{schema && (
  <h3 class="title is-5" style="margin-top: 4rem;">Body Parameters</h3>
  <BodyParametersInner lang={lang} schema={schema} path={path} method={method} properties={getProperties()} />
)}
